Namespaces:
  =: io.murano.apps.docker
  std: io.murano
  res: io.murano.resources

Name: DockerSingleVMServer50

Extends: DockerServer

Properties:
  name:
    Contract: $.string().notNull()

  instance:
    Contract: $.class(res:Instance).notNull()

  public_ip:
    Contract: $.string()
    Usage: Out

  last_port:
    Contract: $.int()
    Default: 1024
    Usage: InOut


Workflow:
  initialize:
    Body:
      - $.environment: $.find(std:Environment).require()

  deploy:
    Body:
      - $.environment: $.find(std:Environment).require()
      - If: not $.getAttr(deployed, false)
        Then:
          - $.environment.reporter.report($this, 'Create VM for Docker Server')
          - $.super($.deploy())
          - $.instance.deploy()
          - $.cast('io.murano.apps.docker.DockerServer').addDockerServer($.instance)
          - $.public_ip: $.instance.floatingIpAddress
          - $.setAttr(deployed, true)

  addDockerApp:
      Arguments:
        instance:
          Contract: $.class(res:Instance).notNull()
        docker_image:
          Contract: $.string().notNull()
        docker_env:
          Contract: [$.string()]
        docker_app_ports:
          Contract: []
        docker_port_bindings:
          Contract: {}
      Body:
        - $.cast('io.murano.apps.docker.DockerServer').addDockerApp(
            instance => $instance,
            docker_image => $docker_image,
            docker_env => $docker_env,
            docker_app_ports => $docker_app_ports,
            docker_port_bindings => $docker_port_bindings
            )

  addApplication:
        Arguments:
          docker_image:
            Contract: $.string().notNull()
          docker_env:
            Contract: [$.string()]
          app_port:
            Contract: $.int()
        Body:
         - $.pullImage(instance => $.instance,
               image => $docker_image
             )
         - $alloc_port: $.allocatePort($app_port)
         - $port_spec:
            - $app_port.int()
         - $port_binding:
             $app_port:
               'HostPort': $alloc_port
               'HostIP': '0.0.0.0'
         - $securityGroupIngress:
             - ToPort: $alloc_port
               FromPort: $alloc_port
               IpProtocol: 'tcp'
               External: True
         - $.environment.securityGroupManager.addGroupIngress($securityGroupIngress)

         - $.addDockerApp(
              instance => $.instance,
              docker_image => $docker_image,
              docker_env => $docker_env,
              docker_app_ports => $port_spec,
              docker_port_bindings => $port_binding
             )
         - Return: $alloc_port
  pullImage:
      Arguments:
        instance:
          Contract: $.class(res:Instance).notNull()
        image:
          Contract: $.string().notNull()
      Body:
        - $.cast('io.murano.apps.docker.DockerServer').pullImage(
            instance => $instance,
            image => $image
           )

  allocatePort:
    Arguments:
      port:
        Contract: $.int().notNull()
    Body:
      - $.last_port: $.last_port + 1
      - Return: $.last_port