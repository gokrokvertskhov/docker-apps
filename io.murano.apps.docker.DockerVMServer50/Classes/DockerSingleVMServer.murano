Namespaces:
  =: io.murano.apps.docker
  std: io.murano
  res: io.murano.resources

Name: DockerSingleVMServer50

Extends: DockerServer

Properties:
  name:
    Contract: $.string().notNull()

  instance:
    Contract: $.class(res:Instance).notNull()

  public_ip:
    Contract: $.string()
    Usage: Out

  last_port:
    Contract: $.int()
    Default: 1024
    Usage: InOut


Workflow:
  initialize:
    Body:
      - $.environment: $.find(std:Environment).require()

  deploy:
    Body:
      - $.environment: $.find(std:Environment).require()
      - If: not $.getAttr(deployed, false)
        Then:
          - $.environment.reporter.report($this, 'Create VM for Docker Server')
          - $.super($.deploy())
          - $.instance.deploy()
          - $.cast('io.murano.apps.docker.DockerServer').addDockerServer($.instance)
          - $.public_ip: $.instance.floatingIpAddress
          - $.setAttr(deployed, true)

  addDockerApp:
      Arguments:
        instance:
          Contract: $.class(res:Instance).notNull()
        docker_image:
          Contract: $.string().notNull()
        docker_env:
          Contract: [$.string()]
        docker_app_ports:
          Contract: []
        docker_port_bindings:
          Contract: {}
      Body:
        - $.cast('io.murano.apps.docker.DockerServer').addDockerApp(
            instance => $instance,
            docker_image => $docker_image,
            docker_env => $docker_env,
            docker_app_ports => $docker_app_ports,
            docker_port_bindings => $docker_port_bindings
            )

  addApplication:
        Arguments:
          docker_image:
            Contract: $.string().notNull()
          docker_env:
            Contract: [$.string()]
          app_ports:
            Contract: [$.int()]
        Body:
         - $.pullImage(instance => $.instance, image => $docker_image)
         - $portBindings: {}
         - $securityGroupIngress: []
         - For: port
           In: $app_ports
           Do:
             - $allocatedPort: $.allocatePort()
             - $portBindings[$port]:
                 'HostPort': $allocatedPort
                 'HostIP': '0.0.0.0'
             - $rule:
                 ToPort: $allocatedPort
                 FromPort: $allocatedPort
                 IpProtocol: 'tcp'
                 External: True
             - $securityGroupIngress: $securityGroupIngress + list($rule)

         - $.environment.securityGroupManager.addGroupIngress($securityGroupIngress)
         - $.addDockerApp(
              instance => $.instance,
              docker_image => $docker_image,
              docker_env => $docker_env,
              docker_app_ports => $app_ports,
              docker_port_bindings => $portBindings
             )
         - Return: dict($portBindings.select($ => $portBindings[$].HostPort))

  pullImage:
      Arguments:
        instance:
          Contract: $.class(res:Instance).notNull()
        image:
          Contract: $.string().notNull()
      Body:
        - $.cast('io.murano.apps.docker.DockerServer').pullImage(
            instance => $instance,
            image => $image
           )

  allocatePort:
    Body:
      - $.last_port: $.last_port + 1
      - Return: $.last_port